<?xml version="1.0" encoding="ISO-8859-1"?>
<project name="throughput-suite" default="perf-suite" basedir=".">
	<!-- Use this property to control the conflation mode:
	   REPLACE - conflate in place(like normal people do)
	   APPEND - conflate and re-order to end of queue(default old behaviour, daft)
	   NONE - no conflation
	   COMPARE - conflation using the now deprecated comparator facility
	-->
    <property name="conflation.mode" value="NONE"/>
    <property environment="env"/>
    <property name="suite.ant.file" value="throughput-suite.xml"/>
	<property name="client.jvm.args" value="-server -Xms2g -Xmx2g"/>
	<property name="client.threads" value="10"/>        
    <property name="max.time" value="5.0"/>
	<import file="perf-test-server-tasks.xml" />
	<!-- Further common settings are available in the test-suite-common file
	-->
	<import file="perf-test-suite-common.xml" />

	<target name="perfTest-zing-125b-30k">
        <run-ramping-throughput-test test.name="zing-125b-30k" 
            message.size="125" 
            publish.pause.seconds="0.25"
            initial.clients="30000"
            max.clients="30000"
            clients.increment="0"
            initial.messages="1"
            message.increment="0"
            initial.topic.num="50"
            topic.increment="0"/>
    </target>

   <target name="perfTest-zing-125b-25k">
        <run-ramping-throughput-test test.name="zing-125b-25k" 
            message.size="125" 
            publish.pause.seconds="0.25"
            initial.clients="25000"
            max.clients="25000"
            clients.increment="0"
            initial.messages="1"
            message.increment="0"
            initial.topic.num="50"
            topic.increment="0"/>
    </target>

   <target name="perfTest-zing-125b-20k">
        <run-ramping-throughput-test test.name="zing-125b-20k" 
            message.size="125" 
            publish.pause.seconds="0.25"
            initial.clients="20000"
            max.clients="20000"
            clients.increment="0"
            initial.messages="1"
            message.increment="0"
            initial.topic.num="50"
            topic.increment="0"/>
    </target>

   <target name="perfTest-zing-125b-15k">
        <run-ramping-throughput-test test.name="zing-125b-15k" 
            message.size="125" 
            publish.pause.seconds="0.25"
            initial.clients="15000"
            max.clients="15000"
            clients.increment="0"
            initial.messages="1"
            message.increment="0"
            initial.topic.num="50"
            topic.increment="0"/>
    </target>

   <target name="perfTest-zing-125b-10k">
        <run-ramping-throughput-test test.name="zing-125b-10k" 
            message.size="125" 
            publish.pause.seconds="0.25"
            initial.clients="10000"
            max.clients="10000"
            clients.increment="0"
            initial.messages="1"
            message.increment="0"
            initial.topic.num="50"
            topic.increment="0"/>
    </target>

  <target name="perfTest-zing-125b-5k">
        <run-ramping-throughput-test test.name="zing-125b-5k" 
            message.size="125" 
            publish.pause.seconds="0.25"
            initial.clients="5000"
            max.clients="5000"
            clients.increment="0"
            initial.messages="1"
            message.increment="0"
            initial.topic.num="50"
            topic.increment="0"/>
    </target>


	<macrodef name="run-ramping-throughput-test">
		<!-- Client attributes -->
		<attribute name="initial.clients" default="1"/>
		<attribute name="max.clients" default="2000"/>
		<attribute name="clients.increment" default="1"/>
		<attribute name="client.create.pause.seconds" default="0"/>
		<attribute name="client.create.interval.seconds" default="5"/>
		<!-- Server attributes -->
		<attribute name="publish.pause.seconds" default="0.1" />
		<attribute name="message.size" default="100" />
		<attribute name="initial.messages" default="10" />
		<attribute name="message.increment.interval" default="10" />
		<attribute name="message.increment" default="10" />
		<attribute name="initial.topic.num" default="100" />
		<attribute name="topic.increment.interval" default="10" />
		<attribute name="topic.increment" default="10" />
		<attribute name="test.name" />
		<sequential>
			<var name="full-test-name" value="@{test.name}-${diffusion.protocol}-${conflation.mode}"/>
			
			<if>
             <equals arg1="${skip.server}" arg2="true" /><then/>
			<elseif>
			 <equals arg1="${diffusion.host}" arg2="localhost" />
			 <then>
			 	<!-- Create publisher configuration -->
			 	<configure-injector output="@{test.name}.xml"
 					publish.pause.seconds="@{publish.pause.seconds}"
 					message.size="@{message.size}" 
 					initial.messages="@{initial.messages}"
 					message.increment.interval="@{message.increment.interval}"
 					message.increment="@{message.increment}"
 					initial.topic.num="@{initial.topic.num}"
 					topic.increment.interval="@{topic.increment.interval}"
 					topic.increment="@{topic.increment}" />
			 	<!-- package and deliver to diffusion server to be auto-deployed -->
 				<dar publisher.name="@{test.name}" />
 				<deploy-dar dar.name="@{test.name}.dar" />
			 </then>
			 </elseif>
			 <else>
				<sshexec host="${diffusion.host}"
					username="${ssh.username}"
					password="${ssh.password}" 
                    command="cd benchmark-server;ant -f ${suite.ant.file} -Dtest.name=@{test.name} -Dpublish.pause.seconds=@{publish.pause.seconds} -Dmessage.size=@{message.size} -Dinitial.messages=@{initial.messages} -Dmessage.increment.interval=@{message.increment.interval} -Dmessage.increment=@{message.increment} -Dinitial.topic.num=@{initial.topic.num} -Dtopic.increment.interval=@{topic.increment.interval} -Dtopic.increment=@{topic.increment} -Dconflation.mode=${conflation.mode} start-injector" />

			 </else>
			</if>
			<!-- Start Client -->
            <if>
             <equals arg1="${skip.client}" arg2="true" />
            	<then><input>Press Return key to continue...</input></then>
            	<else>
                    <if>
                        <available file="${full-test-name}.settings"/>
                        <then>
                            <echo message="Using existing settings file: ${full-test-name}.settings"/>
                        </then>
                        <else>
                            <echo file="${full-test-name}.settings">
#Publisher settings:
publish.pause.seconds=@{publish.pause.seconds}
message.size=@{message.size}
initial.messages=@{initial.messages}
message.increment.interval="@{message.increment.interval}
message.increment=@{message.increment}
initial.topic.num=@{initial.topic.num}
topic.increment.interval=@{topic.increment.interval}
topic.increment=@{topic.increment}
#Client settings:
initial.clients=@{initial.clients}
max.clients=@{max.clients}
clients.increment=@{clients.increment}
client.create.pause.seconds=@{client.create.pause.seconds}
client.increment.pause.seconds=@{client.increment.pause.seconds}
inbound.threadpool.size=${client.threads}
client.jvm.args=${client.jvm.args}
diffusion.url=${diffusion.url}
local.interfaces=${diffusion.client.nics}
experiment.output=${full-test-name}.csv
clients.output=${full-test-name}-clients.log
max.test.time.minutes=${max.time}
                            </echo>
                        </else>
                    </if>
        	    <run-ramping-client testname="${full-test-name}"/>
        	    </else>
            </if>			
			<!-- Cleanup server deployment -->
			<if>
             <equals arg1="${skip.server}" arg2="true" />
			 <then><input>Press Return key to continue...</input></then>
			<elseif>
			 <equals arg1="${diffusion.host}" arg2="localhost" />
			 <then>
			 	<undeploy-dar dar.name="@{test.name}.dar" />
 				<delete file="@{test.name}.dar"/>
			 </then>
			</elseif>
		    <else>
				<sshexec host="${diffusion.host}"
					username="${ssh.username}"
					password="${ssh.password}" 
					command="cd benchmark-server;ant -f ${suite.ant.file} -Dtest.name=@{test.name} stop-injector" />
			 </else>
			</if>
		</sequential>
	</macrodef>
	<target name="start-injector">
		<configure-injector output="${test.name}.xml"
				publish.pause.seconds="${publish.pause.seconds}"
				message.size="${message.size}" 
				initial.messages="${initial.messages}"
				message.increment.interval="${message.increment.interval}"
				message.increment="${message.increment}"
				initial.topic.num="${initial.topic.num}"
				topic.increment.interval="${topic.increment.interval}"
				topic.increment="${topic.increment}" />
		<dar publisher.name="${test.name}" />
		<deploy-dar dar.name="${test.name}.dar" />
	</target>
	<target name="stop-injector">
		<undeploy-dar dar.name="${test.name}.dar" />
		<delete file="${test.name}.dar"/>
	</target>
	
	<macrodef name="run-ramping-client">
		<attribute name="testname" />
        <sequential>
			<echo message="...Starting test client..."/>
			<java classname="experiments.ExperimentRunner" fork="true" 
				  failonerror="true" jvmargs="${client.jvm.args}">
                <sysproperty key="log.connection.exception" value="false" />
				<arg value="experiments.ThroughputExperiment"/>
				<arg value="@{testname}.settings"/>
                <classpath refid="test.runtime.classpath" />
			</java>
	        <echo message="...Test client finished..."/>
		</sequential>
	</macrodef>
	<macrodef name="configure-injector">
		<!-- 10 times a second -->
		<attribute name="publish.pause.seconds" default="0.1" />
		<attribute name="message.size" default="100" />
		<attribute name="initial.messages" default="10" />
		<attribute name="message.increment.interval" default="10" />
		<attribute name="message.increment" default="10" />
		<attribute name="initial.topic.num" default="100" />
		<attribute name="topic.increment.interval" default="10" />
		<attribute name="topic.increment" default="10" />
		<attribute name="output" />
		<sequential>
			<copy file="etc/Injector.xml" tofile="etc/@{output}" overwrite="true">
				<filterset begintoken="@" endtoken="@">
                    <filter token="conflationMode" value="${conflation.mode}" />
                    <filter token="pauseSeconds" value="@{publish.pause.seconds}" />
					<filter token="messageSize" value="@{message.size}" />
					<filter token="initialMessages" value="@{initial.messages}" />
					<filter token="messageIncrementIntervalInPauses" value="@{message.increment.interval}" />
					<filter token="messageIncrement" value="@{message.increment}" />
					<filter token="initialTopicNum" value="@{initial.topic.num}" />
					<filter token="topicIncrementIntervalInPauses" value="@{topic.increment.interval}" />
					<filter token="topicIncrement" value="@{topic.increment}" />
				</filterset>
			</copy>
		</sequential>
	</macrodef>
</project>
